-- ========================================
-- MODERN UI LIBRARY - MOD MENU SYSTEM
-- ========================================

local UILibrary = {}
UILibrary.__index = UILibrary

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")
local LocalPlayer = Players.LocalPlayer

-- UI Library Configuration
local Config = {
    MainSize = UDim2.new(0, 600, 0, 400),
    SidebarWidth = 150,
    Colors = {
        Primary = Color3.fromRGB(20, 20, 30),
        Secondary = Color3.fromRGB(30, 30, 40),
        Accent = Color3.fromRGB(100, 100, 255),
        Success = Color3.fromRGB(0, 200, 100),
        Danger = Color3.fromRGB(255, 100, 100),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180)
    }
}

-- Create Main UI Library
function UILibrary.new(title)
    local self = setmetatable({}, UILibrary)
    
    self.Title = title or "Mod Menu"
    self.Tabs = {}
    self.CurrentTab = nil
    self.IsOpen = false
    
    self:CreateMainUI()
    self:CreateOpenButton()
    
    return self
end

-- Create the main UI structure
function UILibrary:CreateMainUI()
    -- Main ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "ModMenuLibrary"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.Parent = game.CoreGui
    
    -- Main Frame (hidden by default)
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = Config.MainSize
    self.MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    self.MainFrame.BackgroundColor3 = Config.Colors.Primary
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Visible = false
    self.MainFrame.Active = true
    self.MainFrame.Draggable = true
    self.MainFrame.Parent = self.ScreenGui
    
    -- Main Frame Corner
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = self.MainFrame
    
    -- Main Frame Stroke
    local mainStroke = Instance.new("UIStroke")
    mainStroke.Color = Config.Colors.Accent
    mainStroke.Thickness = 2
    mainStroke.Transparency = 0.3
    mainStroke.Parent = self.MainFrame
    
    -- Title Bar
    self.TitleBar = Instance.new("Frame")
    self.TitleBar.Name = "TitleBar"
    self.TitleBar.Size = UDim2.new(1, 0, 0, 40)
    self.TitleBar.Position = UDim2.new(0, 0, 0, 0)
    self.TitleBar.BackgroundColor3 = Config.Colors.Secondary
    self.TitleBar.BorderSizePixel = 0
    self.TitleBar.Parent = self.MainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = self.TitleBar
    
    -- Title Text
    self.TitleText = Instance.new("TextLabel")
    self.TitleText.Name = "TitleText"
    self.TitleText.Size = UDim2.new(1, -50, 1, 0)
    self.TitleText.Position = UDim2.new(0, 15, 0, 0)
    self.TitleText.BackgroundTransparency = 1
    self.TitleText.Text = self.Title
    self.TitleText.TextColor3 = Config.Colors.Text
    self.TitleText.TextSize = 18
    self.TitleText.TextXAlignment = Enum.TextXAlignment.Left
    self.TitleText.Font = Enum.Font.GothamBold
    self.TitleText.Parent = self.TitleBar
    
    -- Close Button
    self.CloseButton = Instance.new("TextButton")
    self.CloseButton.Name = "CloseButton"
    self.CloseButton.Size = UDim2.new(0, 30, 0, 30)
    self.CloseButton.Position = UDim2.new(1, -35, 0, 5)
    self.CloseButton.BackgroundColor3 = Config.Colors.Danger
    self.CloseButton.BorderSizePixel = 0
    self.CloseButton.Text = "Ã—"
    self.CloseButton.TextColor3 = Config.Colors.Text
    self.CloseButton.TextSize = 18
    self.CloseButton.Font = Enum.Font.GothamBold
    self.CloseButton.Parent = self.TitleBar
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 8)
    closeCorner.Parent = self.CloseButton
    
    -- Sidebar
    self.Sidebar = Instance.new("Frame")
    self.Sidebar.Name = "Sidebar"
    self.Sidebar.Size = UDim2.new(0, Config.SidebarWidth, 1, -40)
    self.Sidebar.Position = UDim2.new(0, 0, 0, 40)
    self.Sidebar.BackgroundColor3 = Config.Colors.Secondary
    self.Sidebar.BorderSizePixel = 0
    self.Sidebar.Parent = self.MainFrame
    
    -- Sidebar List Layout
    self.SidebarList = Instance.new("UIListLayout")
    self.SidebarList.SortOrder = Enum.SortOrder.LayoutOrder
    self.SidebarList.Padding = UDim.new(0, 2)
    self.SidebarList.Parent = self.Sidebar
    
    -- Content Area
    self.ContentArea = Instance.new("Frame")
    self.ContentArea.Name = "ContentArea"
    self.ContentArea.Size = UDim2.new(1, -Config.SidebarWidth, 1, -40)
    self.ContentArea.Position = UDim2.new(0, Config.SidebarWidth, 0, 40)
    self.ContentArea.BackgroundColor3 = Config.Colors.Primary
    self.ContentArea.BorderSizePixel = 0
    self.ContentArea.Parent = self.MainFrame
    
    -- Content Area Corner
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 8)
    contentCorner.Parent = self.ContentArea
    
    -- Connect close button
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Close()
    end)
end

-- Create the open button
function UILibrary:CreateOpenButton()
    self.OpenButton = Instance.new("TextButton")
    self.OpenButton.Name = "OpenButton"
    self.OpenButton.Size = UDim2.new(0, 60, 0, 60)
    self.OpenButton.Position = UDim2.new(0, 20, 0, 20)
    self.OpenButton.BackgroundColor3 = Config.Colors.Primary
    self.OpenButton.BorderSizePixel = 0
    self.OpenButton.Text = "â˜°"
    self.OpenButton.TextColor3 = Config.Colors.Text
    self.OpenButton.TextSize = 24
    self.OpenButton.Font = Enum.Font.GothamBold
    self.OpenButton.Active = true
    self.OpenButton.Draggable = true
    self.OpenButton.Parent = self.ScreenGui
    
    local openCorner = Instance.new("UICorner")
    openCorner.CornerRadius = UDim.new(0, 15)
    openCorner.Parent = self.OpenButton
    
    local openStroke = Instance.new("UIStroke")
    openStroke.Color = Config.Colors.Accent
    openStroke.Thickness = 2
    openStroke.Transparency = 0.3
    openStroke.Parent = self.OpenButton
    
    self.OpenButton.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
end

-- Create a new tab
function UILibrary:CreateTab(name, icon)
    local tab = {
        Name = name,
        Icon = icon or "ðŸ“„",
        Elements = {},
        Content = nil,
        Button = nil,
        ScrollFrame = nil,
        IsActive = false
    }
    
    -- Create tab button
    tab.Button = Instance.new("TextButton")
    tab.Button.Name = name .. "Button"
    tab.Button.Size = UDim2.new(1, 0, 0, 35)
    tab.Button.BackgroundColor3 = Config.Colors.Primary
    tab.Button.BorderSizePixel = 0
    tab.Button.Text = tab.Icon .. " " .. name
    tab.Button.TextColor3 = Config.Colors.TextSecondary
    tab.Button.TextSize = 14
    tab.Button.Font = Enum.Font.Gotham
    tab.Button.TextXAlignment = Enum.TextXAlignment.Left
    tab.Button.Parent = self.Sidebar
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tab.Button
    
    -- Add padding to button text
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingLeft = UDim.new(0, 10)
    tabPadding.Parent = tab.Button
    
    -- Create tab content frame
    tab.Content = Instance.new("Frame")
    tab.Content.Name = name .. "Content"
    tab.Content.Size = UDim2.new(1, 0, 1, 0)
    tab.Content.Position = UDim2.new(0, 0, 0, 0)
    tab.Content.BackgroundTransparency = 1
    tab.Content.Visible = false
    tab.Content.Parent = self.ContentArea
    
    -- Create scroll frame for tab content
    tab.ScrollFrame = Instance.new("ScrollingFrame")
    tab.ScrollFrame.Name = "ScrollFrame"
    tab.ScrollFrame.Size = UDim2.new(1, -20, 1, -20)
    tab.ScrollFrame.Position = UDim2.new(0, 10, 0, 10)
    tab.ScrollFrame.BackgroundTransparency = 1
    tab.ScrollFrame.BorderSizePixel = 0
    tab.ScrollFrame.ScrollBarThickness = 6
    tab.ScrollFrame.ScrollBarImageColor3 = Config.Colors.Accent
    tab.ScrollFrame.Parent = tab.Content
    
    -- List layout for scroll frame
    local scrollLayout = Instance.new("UIListLayout")
    scrollLayout.SortOrder = Enum.SortOrder.LayoutOrder
    scrollLayout.Padding = UDim.new(0, 8)
    scrollLayout.Parent = tab.ScrollFrame
    
    -- Update canvas size when content changes
    scrollLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, scrollLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Tab button click handler
    tab.Button.MouseButton1Click:Connect(function()
        self:SelectTab(name)
    end)
    
    -- Add to tabs table
    self.Tabs[name] = tab
    
    -- Select first tab by default
    if not self.CurrentTab then
        self:SelectTab(name)
    end
    
    return tab
end

-- Select a tab
function UILibrary:SelectTab(name)
    if not self.Tabs[name] then return end
    
    -- Hide current tab
    if self.CurrentTab and self.Tabs[self.CurrentTab] then
        self.Tabs[self.CurrentTab].Content.Visible = false
        self.Tabs[self.CurrentTab].Button.BackgroundColor3 = Config.Colors.Primary
        self.Tabs[self.CurrentTab].Button.TextColor3 = Config.Colors.TextSecondary
        self.Tabs[self.CurrentTab].IsActive = false
    end
    
    -- Show new tab
    self.CurrentTab = name
    local tab = self.Tabs[name]
    tab.Content.Visible = true
    tab.Button.BackgroundColor3 = Config.Colors.Accent
    tab.Button.TextColor3 = Config.Colors.Text
    tab.IsActive = true
end

-- Add button to tab
function UILibrary:AddButton(tabName, text, callback)
    local tab = self.Tabs[tabName]
    if not tab then return end
    
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(1, 0, 0, 35)
    button.BackgroundColor3 = Config.Colors.Secondary
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Config.Colors.Text
    button.TextSize = 14
    button.Font = Enum.Font.Gotham
    button.Parent = tab.ScrollFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    local buttonStroke = Instance.new("UIStroke")
    buttonStroke.Color = Config.Colors.Accent
    buttonStroke.Thickness = 1
    buttonStroke.Transparency = 0.7
    buttonStroke.Parent = button
    
    button.MouseButton1Click:Connect(function()
        if callback then callback() end
        
        -- Visual feedback
        button.BackgroundColor3 = Config.Colors.Success
        wait(0.1)
        button.BackgroundColor3 = Config.Colors.Secondary
    end)
    
    return button
end

-- Add toggle to tab
function UILibrary:AddToggle(tabName, text, default, callback)
    local tab = self.Tabs[tabName]
    if not tab then return end
    
    local isEnabled = default or false
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = text .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 35)
    toggleFrame.BackgroundColor3 = Config.Colors.Secondary
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = tab.ScrollFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleFrame
    
    local toggleStroke = Instance.new("UIStroke")
    toggleStroke.Color = Config.Colors.Accent
    toggleStroke.Thickness = 1
    toggleStroke.Transparency = 0.7
    toggleStroke.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(1, -60, 1, 0)
    toggleLabel.Position = UDim2.new(0, 10, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = text
    toggleLabel.TextColor3 = Config.Colors.Text
    toggleLabel.TextSize = 14
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 40, 0, 20)
    toggleButton.Position = UDim2.new(1, -50, 0.5, -10)
    toggleButton.BackgroundColor3 = isEnabled and Config.Colors.Success or Config.Colors.Primary
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = isEnabled and "ON" or "OFF"
    toggleButton.TextColor3 = Config.Colors.Text
    toggleButton.TextSize = 12
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Parent = toggleFrame
    
    local toggleButtonCorner = Instance.new("UICorner")
    toggleButtonCorner.CornerRadius = UDim.new(0, 10)
    toggleButtonCorner.Parent = toggleButton
    
    toggleButton.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        toggleButton.Text = isEnabled and "ON" or "OFF"
        toggleButton.BackgroundColor3 = isEnabled and Config.Colors.Success or Config.Colors.Primary
        
        if callback then callback(isEnabled) end
    end)
    
    return {
        Frame = toggleFrame,
        Button = toggleButton,
        GetState = function() return isEnabled end,
        SetState = function(state)
            isEnabled = state
            toggleButton.Text = isEnabled and "ON" or "OFF"
            toggleButton.BackgroundColor3 = isEnabled and Config.Colors.Success or Config.Colors.Primary
        end
    }
end

-- Add slider to tab
function UILibrary:AddSlider(tabName, text, min, max, default, callback)
    local tab = self.Tabs[tabName]
    if not tab then return end
    
    local value = default or min
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = text .. "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 50)
    sliderFrame.BackgroundColor3 = Config.Colors.Secondary
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = tab.ScrollFrame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 8)
    sliderCorner.Parent = sliderFrame
    
    local sliderStroke = Instance.new("UIStroke")
    sliderStroke.Color = Config.Colors.Accent
    sliderStroke.Thickness = 1
    sliderStroke.Transparency = 0.7
    sliderStroke.Parent = sliderFrame
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(1, 0, 0, 20)
    sliderLabel.Position = UDim2.new(0, 10, 0, 5)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = text .. ": " .. value
    sliderLabel.TextColor3 = Config.Colors.Text
    sliderLabel.TextSize = 14
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Size = UDim2.new(1, -20, 0, 6)
    sliderTrack.Position = UDim2.new(0, 10, 0, 30)
    sliderTrack.BackgroundColor3 = Config.Colors.Primary
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 3)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Config.Colors.Accent
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 3)
    fillCorner.Parent = sliderFill
    
    local sliderHandle = Instance.new("TextButton")
    sliderHandle.Size = UDim2.new(0, 16, 0, 16)
    sliderHandle.Position = UDim2.new((value - min) / (max - min), -8, 0.5, -8)
    sliderHandle.BackgroundColor3 = Config.Colors.Text
    sliderHandle.BorderSizePixel = 0
    sliderHandle.Text = ""
    sliderHandle.Parent = sliderTrack
    
    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(0, 8)
    handleCorner.Parent = sliderHandle
    
    local dragging = false
    
    sliderHandle.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = LocalPlayer:GetMouse()
            local trackPos = sliderTrack.AbsolutePosition.X
            local trackSize = sliderTrack.AbsoluteSize.X
            local mousePos = mouse.X
            
            local percent = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
            value = math.floor(min + (max - min) * percent)
            
            sliderLabel.Text = text .. ": " .. value
            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
            sliderHandle.Position = UDim2.new(percent, -8, 0.5, -8)
            
            if callback then callback(value) end
        end
    end)
    
    return {
        Frame = sliderFrame,
        GetValue = function() return value end,
        SetValue = function(newValue)
            value = math.clamp(newValue, min, max)
            local percent = (value - min) / (max - min)
            sliderLabel.Text = text .. ": " .. value
            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
            sliderHandle.Position = UDim2.new(percent, -8, 0.5, -8)
        end
    }
end

-- Add text input to tab
function UILibrary:AddTextInput(tabName, text, placeholder, callback)
    local tab = self.Tabs[tabName]
    if not tab then return end
    
    local inputFrame = Instance.new("Frame")
    inputFrame.Name = text .. "Input"
    inputFrame.Size = UDim2.new(1, 0, 0, 50)
    inputFrame.BackgroundColor3 = Config.Colors.Secondary
    inputFrame.BorderSizePixel = 0
    inputFrame.Parent = tab.ScrollFrame
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 8)
    inputCorner.Parent = inputFrame
    
    local inputStroke = Instance.new("UIStroke")
    inputStroke.Color = Config.Colors.Accent
    inputStroke.Thickness = 1
    inputStroke.Transparency = 0.7
    inputStroke.Parent = inputFrame
    
    local inputLabel = Instance.new("TextLabel")
    inputLabel.Size = UDim2.new(1, 0, 0, 20)
    inputLabel.Position = UDim2.new(0, 10, 0, 5)
    inputLabel.BackgroundTransparency = 1
    inputLabel.Text = text
    inputLabel.TextColor3 = Config.Colors.Text
    inputLabel.TextSize = 14
    inputLabel.Font = Enum.Font.Gotham
    inputLabel.TextXAlignment = Enum.TextXAlignment.Left
    inputLabel.Parent = inputFrame
    
    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(1, -20, 0, 20)
    textBox.Position = UDim2.new(0, 10, 0, 25)
    textBox.BackgroundColor3 = Config.Colors.Primary
    textBox.BorderSizePixel = 0
    textBox.Text = ""
    textBox.PlaceholderText = placeholder or ""
    textBox.TextColor3 = Config.Colors.Text
    textBox.PlaceholderColor3 = Config.Colors.TextSecondary
    textBox.TextSize = 12
    textBox.Font = Enum.Font.Gotham
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.Parent = inputFrame
    
    local boxCorner = Instance.new("UICorner")
    boxCorner.CornerRadius = UDim.new(0, 6)
    boxCorner.Parent = textBox
    
    local boxPadding = Instance.new("UIPadding")
    boxPadding.PaddingLeft = UDim.new(0, 8)
    boxPadding.PaddingRight = UDim.new(0, 8)
    boxPadding.Parent = textBox
    
    textBox.FocusLost:Connect(function()
        if callback then callback(textBox.Text) end
    end)
    
    return {
        Frame = inputFrame,
        TextBox = textBox,
        GetText = function() return textBox.Text end,
        SetText = function(newText) textBox.Text = newText end
    }
end

-- Add label to tab
function UILibrary:AddLabel(tabName, text)
    local tab = self.Tabs[tabName]
    if not tab then return end
    
    local label = Instance.new("TextLabel")
    label.Name = text .. "Label"
    label.Size = UDim2.new(1, 0, 0, 25)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Config.Colors.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = tab.ScrollFrame
    
    local labelPadding = Instance.new("UIPadding")
    labelPadding.PaddingLeft = UDim.new(0, 10)
    labelPadding.Parent = label
    
    return {
        Label = label,
        SetText = function(newText) label.Text = newText end
    }
end

-- Open the menu
function UILibrary:Open()
    self.IsOpen = true
    self.MainFrame.Visible = true
    self.OpenButton.Text = "Ã—"
end

-- Close the menu
function UILibrary:Close()
    self.IsOpen = false
    self.MainFrame.Visible = false
    self.OpenButton.Text = "â˜°"
end

-- Toggle the menu
function UILibrary:Toggle()
    if self.IsOpen then
        self:Close()
    else
        self:Open()
    end
end

-- Destroy the UI
function UILibrary:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return UILibrary
