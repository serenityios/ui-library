-- ========================================
-- MODERN GLASS UI LIBRARY - SLEEK DESIGN
-- ========================================

local UILibrary = {}
UILibrary.__index = UILibrary

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")
local LocalPlayer = Players.LocalPlayer

-- UI Library Configuration
local Config = {
    MainSize = UDim2.new(0, 220, 0, 300),
    Colors = {
        Primary = Color3.fromRGB(0, 0, 0),
        Accent = Color3.fromRGB(255, 255, 255),
        Success = Color3.fromRGB(0, 100, 0),
        Text = Color3.fromRGB(255, 255, 255)
    },
    Transparency = 0.3,
    StrokeTransparency = 0.5,
    CornerRadius = 16
}

-- Animation settings
local AnimationInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)

-- Create Main UI Library
function UILibrary.new(title)
    local self = setmetatable({}, UILibrary)
    
    self.Title = title or "Mod Menu"
    self.Elements = {}
    self.IsOpen = false
    self.ElementCount = 0
    
    self:CreateMainUI()
    self:CreateOpenButton()
    
    return self
end

-- Create the main UI structure
function UILibrary:CreateMainUI()
    -- Main ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "ModMenuLibrary"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.Parent = game.CoreGui
    
    -- Main Frame (hidden by default)
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = Config.MainSize
    self.MainFrame.Position = UDim2.new(0, 70, 0, 10)
    self.MainFrame.BackgroundColor3 = Config.Colors.Primary
    self.MainFrame.BackgroundTransparency = Config.Transparency
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Visible = false
    self.MainFrame.Active = true
    self.MainFrame.Draggable = true
    self.MainFrame.Parent = self.ScreenGui
    
    -- Main Frame Corner
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, Config.CornerRadius)
    mainCorner.Parent = self.MainFrame
    
    -- Main Frame Stroke
    local mainStroke = Instance.new("UIStroke")
    mainStroke.Color = Config.Colors.Accent
    mainStroke.Thickness = 1
    mainStroke.Transparency = Config.StrokeTransparency
    mainStroke.Parent = self.MainFrame
    
    -- Blur Effect
    local mainBlur = Instance.new("BlurEffect")
    mainBlur.Size = 15
    mainBlur.Parent = self.MainFrame
    
    -- Content ScrollingFrame for elements
    self.ContentFrame = Instance.new("ScrollingFrame")
    self.ContentFrame.Name = "ContentFrame"
    self.ContentFrame.Size = UDim2.new(1, -20, 1, -20)
    self.ContentFrame.Position = UDim2.new(0, 10, 0, 10)
    self.ContentFrame.BackgroundTransparency = 1
    self.ContentFrame.BorderSizePixel = 0
    self.ContentFrame.ScrollBarThickness = 4
    self.ContentFrame.ScrollBarImageColor3 = Config.Colors.Accent
    self.ContentFrame.ScrollBarImageTransparency = 0.5
    self.ContentFrame.Parent = self.MainFrame
    
    -- List layout for content
    self.ContentLayout = Instance.new("UIListLayout")
    self.ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    self.ContentLayout.Padding = UDim.new(0, 10)
    self.ContentLayout.Parent = self.ContentFrame
    
    -- Update canvas size when content changes
    self.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, self.ContentLayout.AbsoluteContentSize.Y + 20)
        -- Auto-resize main frame based on content (with max height)
        local newHeight = math.min(400, self.ContentLayout.AbsoluteContentSize.Y + 40)
        self.MainFrame.Size = UDim2.new(0, 220, 0, newHeight)
    end)
end

-- Create the open button
function UILibrary:CreateOpenButton()
    self.OpenButton = Instance.new("TextButton")
    self.OpenButton.Name = "OpenButton"
    self.OpenButton.Size = UDim2.new(0, 50, 0, 50)
    self.OpenButton.Position = UDim2.new(0, 10, 0, 10)
    self.OpenButton.BackgroundColor3 = Config.Colors.Primary
    self.OpenButton.BackgroundTransparency = Config.Transparency
    self.OpenButton.BorderSizePixel = 0
    self.OpenButton.Text = "â˜°"
    self.OpenButton.TextColor3 = Config.Colors.Text
    self.OpenButton.TextSize = 24
    self.OpenButton.Active = true
    self.OpenButton.Draggable = true
    self.OpenButton.Selectable = true
    self.OpenButton.Parent = self.ScreenGui
    
    local openCorner = Instance.new("UICorner")
    openCorner.CornerRadius = UDim.new(0, 12)
    openCorner.Parent = self.OpenButton
    
    local openStroke = Instance.new("UIStroke")
    openStroke.Color = Config.Colors.Accent
    openStroke.Thickness = 1
    openStroke.Transparency = Config.StrokeTransparency
    openStroke.Parent = self.OpenButton
    
    local openBlur = Instance.new("BlurEffect")
    openBlur.Size = 10
    openBlur.Parent = self.OpenButton
    
    self.OpenButton.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
end

-- Add button to menu
function UILibrary:AddButton(text, callback)
    self.ElementCount = self.ElementCount + 1
    
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(1, 0, 0, 30)
    button.BackgroundColor3 = Config.Colors.Primary
    button.BackgroundTransparency = 0.4
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Config.Colors.Text
    button.TextSize = 14
    button.LayoutOrder = self.ElementCount
    button.Parent = self.ContentFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    button.MouseButton1Click:Connect(function()
        if callback then callback() end
        
        -- Visual feedback
        local originalColor = button.BackgroundColor3
        button.BackgroundColor3 = Config.Colors.Success
        TweenService:Create(button, AnimationInfo, {BackgroundColor3 = originalColor}):Play()
    end)
    
    self.Elements[text] = button
    return button
end

-- Add toggle to menu
function UILibrary:AddToggle(text, default, callback)
    self.ElementCount = self.ElementCount + 1
    local isEnabled = default or false
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = text .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 30)
    toggleFrame.BackgroundColor3 = Config.Colors.Primary
    toggleFrame.BackgroundTransparency = 0.4
    toggleFrame.BorderSizePixel = 0
    toggleFrame.LayoutOrder = self.ElementCount
    toggleFrame.Parent = self.ContentFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(1, -80, 1, 0)
    toggleLabel.Position = UDim2.new(0, 10, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = text
    toggleLabel.TextColor3 = Config.Colors.Text
    toggleLabel.TextSize = 14
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 60, 0, 20)
    toggleButton.Position = UDim2.new(1, -70, 0.5, -10)
    toggleButton.BackgroundColor3 = isEnabled and Config.Colors.Success or Config.Colors.Primary
    toggleButton.BackgroundTransparency = isEnabled and 0.2 or 0.4
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = isEnabled and "ON" or "OFF"
    toggleButton.TextColor3 = Config.Colors.Text
    toggleButton.TextSize = 12
    toggleButton.Parent = toggleFrame
    
    local toggleButtonCorner = Instance.new("UICorner")
    toggleButtonCorner.CornerRadius = UDim.new(0, 6)
    toggleButtonCorner.Parent = toggleButton
    
    toggleButton.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        toggleButton.Text = isEnabled and "ON" or "OFF"
        
        local newColor = isEnabled and Config.Colors.Success or Config.Colors.Primary
        local newTransparency = isEnabled and 0.2 or 0.4
        
        TweenService:Create(toggleButton, AnimationInfo, {
            BackgroundColor3 = newColor,
            BackgroundTransparency = newTransparency
        }):Play()
        
        if callback then callback(isEnabled) end
    end)
    
    self.Elements[text] = {
        Frame = toggleFrame,
        Button = toggleButton,
        GetState = function() return isEnabled end,
        SetState = function(state)
            isEnabled = state
            toggleButton.Text = isEnabled and "ON" or "OFF"
            toggleButton.BackgroundColor3 = isEnabled and Config.Colors.Success or Config.Colors.Primary
            toggleButton.BackgroundTransparency = isEnabled and 0.2 or 0.4
        end
    }
    
    return self.Elements[text]
end

-- Add slider to menu
function UILibrary:AddSlider(text, min, max, default, callback)
    self.ElementCount = self.ElementCount + 1
    local value = default or min
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = text .. "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 50)
    sliderFrame.BackgroundColor3 = Config.Colors.Primary
    sliderFrame.BackgroundTransparency = 0.4
    sliderFrame.BorderSizePixel = 0
    sliderFrame.LayoutOrder = self.ElementCount
    sliderFrame.Parent = self.ContentFrame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 8)
    sliderCorner.Parent = sliderFrame
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(1, 0, 0, 20)
    sliderLabel.Position = UDim2.new(0, 10, 0, 5)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = text .. ": " .. value
    sliderLabel.TextColor3 = Config.Colors.Text
    sliderLabel.TextSize = 14
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Size = UDim2.new(1, -20, 0, 4)
    sliderTrack.Position = UDim2.new(0, 10, 0, 30)
    sliderTrack.BackgroundColor3 = Config.Colors.Primary
    sliderTrack.BackgroundTransparency = 0.6
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 2)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Config.Colors.Accent
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 2)
    fillCorner.Parent = sliderFill
    
    local sliderHandle = Instance.new("Frame")
    sliderHandle.Size = UDim2.new(0, 12, 0, 12)
    sliderHandle.Position = UDim2.new((value - min) / (max - min), -6, 0.5, -6)
    sliderHandle.BackgroundColor3 = Config.Colors.Accent
    sliderHandle.BorderSizePixel = 0
    sliderHandle.Parent = sliderTrack
    
    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(0, 6)
    handleCorner.Parent = sliderHandle
    
    local dragging = false
    local dragConnection
    
    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            
            dragConnection = UserInputService.InputChanged:Connect(function(input2)
                if input2.UserInputType == Enum.UserInputType.MouseMovement or input2.UserInputType == Enum.UserInputType.Touch then
                    local trackPos = sliderTrack.AbsolutePosition.X
                    local trackSize = sliderTrack.AbsoluteSize.X
                    local mousePos = input2.Position.X
                    
                    local percent = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
                    value = math.floor(min + (max - min) * percent)
                    
                    sliderLabel.Text = text .. ": " .. value
                    
                    TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = UDim2.new(percent, 0, 1, 0)}):Play()
                    TweenService:Create(sliderHandle, TweenInfo.new(0.1), {Position = UDim2.new(percent, -6, 0.5, -6)}):Play()
                    
                    if callback then callback(value) end
                end
            end)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            if dragConnection then
                dragConnection:Disconnect()
                dragConnection = nil
            end
        end
    end)
    
    self.Elements[text] = {
        Frame = sliderFrame,
        GetValue = function() return value end,
        SetValue = function(newValue)
            value = math.clamp(newValue, min, max)
            local percent = (value - min) / (max - min)
            sliderLabel.Text = text .. ": " .. value
            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
            sliderHandle.Position = UDim2.new(percent, -6, 0.5, -6)
        end
    }
    
    return self.Elements[text]
end

-- Add text input to menu
function UILibrary:AddInput(text, placeholder, callback)
    self.ElementCount = self.ElementCount + 1
    
    local inputFrame = Instance.new("Frame")
    inputFrame.Name = text .. "Input"
    inputFrame.Size = UDim2.new(1, 0, 0, 50)
    inputFrame.BackgroundColor3 = Config.Colors.Primary
    inputFrame.BackgroundTransparency = 0.4
    inputFrame.BorderSizePixel = 0
    inputFrame.LayoutOrder = self.ElementCount
    inputFrame.Parent = self.ContentFrame
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 8)
    inputCorner.Parent = inputFrame
    
    local inputLabel = Instance.new("TextLabel")
    inputLabel.Size = UDim2.new(1, 0, 0, 20)
    inputLabel.Position = UDim2.new(0, 10, 0, 5)
    inputLabel.BackgroundTransparency = 1
    inputLabel.Text = text
    inputLabel.TextColor3 = Config.Colors.Text
    inputLabel.TextSize = 14
    inputLabel.TextXAlignment = Enum.TextXAlignment.Left
    inputLabel.Parent = inputFrame
    
    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(1, -20, 0, 20)
    textBox.Position = UDim2.new(0, 10, 0, 25)
    textBox.BackgroundColor3 = Config.Colors.Primary
    textBox.BackgroundTransparency = 0.6
    textBox.BorderSizePixel = 0
    textBox.Text = ""
    textBox.PlaceholderText = placeholder or ""
    textBox.TextColor3 = Config.Colors.Text
    textBox.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
    textBox.TextSize = 12
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.Parent = inputFrame
    
    local boxCorner = Instance.new("UICorner")
    boxCorner.CornerRadius = UDim.new(0, 6)
    boxCorner.Parent = textBox
    
    local boxPadding = Instance.new("UIPadding")
    boxPadding.PaddingLeft = UDim.new(0, 8)
    boxPadding.PaddingRight = UDim.new(0, 8)
    boxPadding.Parent = textBox
    
    textBox.FocusLost:Connect(function()
        if callback then callback(textBox.Text) end
    end)
    
    self.Elements[text] = {
        Frame = inputFrame,
        TextBox = textBox,
        GetText = function() return textBox.Text end,
        SetText = function(newText) textBox.Text = newText end
    }
    
    return self.Elements[text]
end

-- Add label to menu
function UILibrary:AddLabel(text)
    self.ElementCount = self.ElementCount + 1
    
    local label = Instance.new("TextLabel")
    label.Name = text .. "Label"
    label.Size = UDim2.new(1, 0, 0, 25)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Config.Colors.Text
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.LayoutOrder = self.ElementCount
    label.Parent = self.ContentFrame
    
    local labelPadding = Instance.new("UIPadding")
    labelPadding.PaddingLeft = UDim.new(0, 10)
    labelPadding.Parent = label
    
    self.Elements[text] = {
        Label = label,
        SetText = function(newText) label.Text = newText end
    }
    
    return self.Elements[text]
end

-- Add separator line
function UILibrary:AddSeparator()
    self.ElementCount = self.ElementCount + 1
    
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(1, -20, 0, 1)
    separator.BackgroundColor3 = Config.Colors.Accent
    separator.BackgroundTransparency = 0.7
    separator.BorderSizePixel = 0
    separator.LayoutOrder = self.ElementCount
    separator.Parent = self.ContentFrame
    
    return separator
end

-- Open the menu
function UILibrary:Open()
    self.IsOpen = true
    self.MainFrame.Visible = true
    self.OpenButton.Text = "Ã—"
    
    -- Fade in animation
    self.MainFrame.BackgroundTransparency = 1
    TweenService:Create(self.MainFrame, AnimationInfo, {BackgroundTransparency = Config.Transparency}):Play()
end

-- Close the menu
function UILibrary:Close()
    self.IsOpen = false
    self.OpenButton.Text = "â˜°"
    
    -- Fade out animation
    local fadeOut = TweenService:Create(self.MainFrame, AnimationInfo, {BackgroundTransparency = 1})
    fadeOut:Play()
    fadeOut.Completed:Connect(function()
        self.MainFrame.Visible = false
    end)
end

-- Toggle the menu
function UILibrary:Toggle()
    if self.IsOpen then
        self:Close()
    else
        self:Open()
    end
end

-- Update menu size based on content
function UILibrary:UpdateSize()
    local contentHeight = self.ContentLayout.AbsoluteContentSize.Y + 40
    local newHeight = math.min(400, contentHeight)
    
    TweenService:Create(self.MainFrame, AnimationInfo, {
        Size = UDim2.new(0, 220, 0, newHeight)
    }):Play()
end

-- Destroy the UI
function UILibrary:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return UILibrary
